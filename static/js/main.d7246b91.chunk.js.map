{"version":3,"sources":["sortHelpers.js","components/PostsTable.js","components/PostsValuesTable.js","components/ViewsPlot.js","components/InteractionsPlot.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["sortLikes","a","b","Likes","sortComments","Comments","sortViews","Views","sortInteractions","first","sortAlphabetical","Displayname","toLowerCase","second","Table","data","filterText","selectValue","updateCurrentPost","filteredRows","filter","item","includes","sort","finalRows","map","key","SocialPost_ID","onClick","name","id","to","PostsValuesTable","currentPost","rows","i","BrandName","TagValue","MentionValue","ViewsPlot","topFive","slice","console","log","barData","labels","Array","from","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","yAxes","ticks","beginAtZero","InteractionsPlot","Filter","handleChange","handleSelect","className","htmlFor","onChange","value","type","App","useState","posts","updatePosts","postValues","updatePostValues","updateSelectValue","useEffect","axios","get","res","getData","updateFilterText","path","exact","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gOAAA,SAASA,EAAUC,EAAGC,GACpB,OAAOA,EAAEC,MAAQF,EAAEE,MAGrB,SAASC,EAAaH,EAAGC,GACvB,OAAOA,EAAEG,SAAWJ,EAAEI,SAGxB,SAASC,EAAUL,EAAGC,GACpB,OAAOA,EAAEK,MAAQN,EAAEM,MAGrB,SAASC,EAAiBP,EAAGC,GAC3B,IAAMO,EAAQR,EAAEE,MAAQF,EAAEI,SAAWJ,EAAEM,MAEvC,OADeL,EAAEC,MAAQD,EAAEG,SAAWH,EAAEK,MACxBE,EAGlB,SAASC,EAAiBT,EAAGC,GAC3B,IAAMO,EAAQR,EAAEU,YAAYC,cACtBC,EAASX,EAAES,YAAYC,cAC7B,OAAIH,EAAQI,EACH,EAELJ,EAAQI,GACF,EAEH,ECjBM,SAASC,EAAT,GAKX,IAJFC,EAIC,EAJDA,KACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,YACAC,EACC,EADDA,kBAEIC,EAAeJ,EAAKK,QAAO,SAAAC,GAAI,OACjCA,EAAKV,YAAYC,cAAcU,SAASN,EAAWJ,kBAGrD,OAAQK,GACN,IAAK,cACHE,EAAaI,KAAKb,GAClB,MACF,IAAK,QACHS,EAAaI,KAAKvB,GAClB,MACF,IAAK,WACHmB,EAAaI,KAAKnB,GAClB,MACF,IAAK,QACHe,EAAaI,KAAKjB,GAClB,MACF,IAAK,eACHa,EAAaI,KAAKf,GAMtB,IAAMgB,EAAYL,EAAaM,KAAI,SAAAJ,GACjC,OACE,wBAAIK,IAAKL,EAAKM,eACZ,wBACEC,QAAS,kBACPV,EAAkB,CAChBW,KAAMR,EAAKV,YACXmB,GAAIT,EAAKM,kBAIb,kBAAC,IAAD,CAAMI,GAAG,eAAeV,EAAKV,cAE/B,4BAAKU,EAAKlB,OACV,4BAAKkB,EAAKhB,UACV,4BAAKgB,EAAKd,WAKhB,OACE,6BACE,+BACE,+BACE,4BACE,oCACA,qCACA,wCACA,uCAGJ,+BAAQiB,KCrED,SAASQ,EAAT,GAAkD,IAAtBjB,EAAqB,EAArBA,KAAMkB,EAAe,EAAfA,YAGzCC,EAAOnB,EACVK,QAAO,SAAAC,GAAI,OAAIA,EAAKM,gBAAkBM,EAAYH,MAClDL,KAAI,SAACJ,EAAMc,GACV,OACE,wBAAIT,IAAKS,GACP,4BAAKd,EAAKe,WACV,4BAAKf,EAAKgB,UACV,4BAAKhB,EAAKiB,kBAKlB,OACE,6BACE,6CAAmBL,EAAYJ,MAC/B,+BACE,+BACE,4BACE,0CACA,yCACA,+CAGJ,+BAAQK,K,oBCxBD,SAASK,EAAT,GAA8B,IAATxB,EAAQ,EAARA,KAC5ByB,EAAU,YAAIzB,GAAMQ,KAAKjB,GAAWmC,MAAM,EAAG,GACnDC,QAAQC,IAAI,WAAYH,GAExB,IAAMI,EAAU,CACdC,OAAQC,MAAMC,KAAKP,GAAS,SAAAnB,GAAI,OAAIA,EAAKV,eACzCqC,SAAU,CACR,CACEC,MAAO,kBACPlC,KAAM+B,MAAMC,KAAKP,GAAS,SAAAnB,GAAI,OAAIA,EAAKd,SACvC2C,gBAAiB,CACf,yBACA,yBACA,yBACA,yBACA,0BAEFC,YAAa,CACX,oBACA,oBACA,oBACA,oBACA,qBAEFC,YAAa,KAgBnB,OACE,6BACE,0DACA,kBAAC,IAAD,CAAKrC,KAAM6B,EAASS,QAdR,CACdC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,UClCV,SAASC,EAAT,GAAqC,IAAT3C,EAAQ,EAARA,KACnCyB,EAAU,YAAIzB,GAAMQ,KAAKf,GAAkBiC,MAAM,EAAG,GAC1DC,QAAQC,IAAI,WAAYH,GAExB,IAAMI,EAAU,CACdC,OAAQC,MAAMC,KAAKP,GAAS,SAAAnB,GAAI,OAAIA,EAAKV,eACzCqC,SAAU,CACR,CACEC,MAAO,iCACPlC,KAAM+B,MAAMC,KACVP,GACA,SAAAnB,GAAI,OAAKA,EAAKd,MAAQc,EAAKhB,SAAWgB,EAAKlB,OAAS,KAEtD+C,gBAAiB,CACf,yBACA,yBACA,yBACA,yBACA,0BAEFC,YAAa,CACX,oBACA,oBACA,oBACA,oBACA,qBAEFC,YAAa,KAgBnB,OACE,6BACE,qEACA,kBAAC,IAAD,CAAKrC,KAAM6B,EAASS,QAdR,CACdC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,UCvCV,SAASE,EAAT,GAA6D,IAA3CC,EAA0C,EAA1CA,aAAc5C,EAA4B,EAA5BA,WAAY6C,EAAgB,EAAhBA,aACzD,OACE,yBAAKC,UAAU,qBACb,2BAAOC,QAAQ,cAAf,oBACA,2BACEC,SAAUJ,EACVK,MAAOjD,EACPkD,KAAK,OACLrC,KAAK,aACLC,GAAG,eAEL,2BAAOiC,QAAQ,gBAAf,aACA,4BAAQC,SAAUH,EAAchC,KAAK,eAAeC,GAAG,gBACrD,4BAAQmC,MAAM,IAAd,UACA,4BAAQA,MAAM,eAAd,gBACA,4BAAQA,MAAM,SAAd,iBACA,4BAAQA,MAAM,YAAd,oBACA,4BAAQA,MAAM,SAAd,iBACA,4BAAQA,MAAM,gBAAd,0B,qBCwFOE,MAnGf,WAAe,MAGgBC,mBAAS,IAHzB,mBAGNC,EAHM,KAGCC,EAHD,OAI0BF,mBAAS,IAJnC,mBAING,EAJM,KAIMC,EAJN,OAK4BJ,mBAAS,IALrC,mBAKNnC,EALM,KAKOf,EALP,OAM4BkD,qBAN5B,mBAMNnD,EANM,KAMOwD,EANP,KAQbC,qBAAU,WAAM,4CACd,4BAAAzE,EAAA,+EAEsB0E,IAAMC,IACtB,iEAHN,OAEUC,EAFV,OAKIP,EAAYO,EAAI9D,MALpB,gDAOI2B,QAAQC,IAAR,MAPJ,0DADc,uBAAC,WAAD,wBAWdmC,KACC,IAEHJ,qBAAU,WAAM,4CACd,4BAAAzE,EAAA,+EAEsB0E,IAAMC,IACtB,sEAHN,OAEUC,EAFV,OAKIL,EAAiBK,EAAI9D,MALzB,gDAOI2B,QAAQC,IAAR,MAPJ,0DADc,uBAAC,WAAD,wBAWdmC,KACC,IAlCU,MAoC0BV,mBAAS,IApCnC,mBAoCNpD,EApCM,KAoCM+D,EApCN,KAgDb,OACE,kBAAC,IAAD,KACE,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QACb,6BACE,4BACE,kBAAC,IAAD,CAAM/B,GAAG,KACP,sCAEF,kBAAC,IAAD,CAAMA,GAAG,eACP,8CAKR,yBAAK+B,UAAU,SACb,8CACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkB,KAAK,IAAIC,OAAK,GACnB,yCACA,kBAACtB,EAAD,CACEC,aAhChB,SAAsBsB,GACpBH,EAAiBG,EAAEC,OAAOlB,QAgCZJ,aA7BhB,SAAsBqB,GACpBT,EAAkBS,EAAEC,OAAOlB,QA6BbjD,WAAYA,EACZC,YAAaA,IAEf,kBAAC,EAAD,CACEF,KAAMsD,EACNrD,WAAYA,EACZC,YAAaA,EACbC,kBAAmBA,KAGvB,kBAAC,IAAD,CAAO8D,KAAK,eACV,kBAAC,EAAD,CAAiBjE,KAAMwD,EAAYtC,YAAaA,KAElD,kBAAC,IAAD,CAAO+C,KAAK,eACV,yBAAKlB,UAAU,SACb,kBAACvB,EAAD,CAAWxB,KAAMsD,IACjB,kBAACX,EAAD,CAAkB3C,KAAMsD,YCrFtBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,a","file":"static/js/main.d7246b91.chunk.js","sourcesContent":["function sortLikes(a, b) {\r\n  return b.Likes - a.Likes;\r\n}\r\n\r\nfunction sortComments(a, b) {\r\n  return b.Comments - a.Comments;\r\n}\r\n\r\nfunction sortViews(a, b) {\r\n  return b.Views - a.Views;\r\n}\r\n\r\nfunction sortInteractions(a, b) {\r\n  const first = a.Likes + a.Comments + a.Views;\r\n  const second = b.Likes + b.Comments + b.Views;\r\n  return second - first;\r\n}\r\n\r\nfunction sortAlphabetical(a, b) {\r\n  const first = a.Displayname.toLowerCase();\r\n  const second = b.Displayname.toLowerCase();\r\n  if (first > second) {\r\n    return 1;\r\n  }\r\n  if (first < second) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nexport {\r\n  sortComments,\r\n  sortInteractions,\r\n  sortAlphabetical,\r\n  sortLikes,\r\n  sortViews,\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  sortAlphabetical,\r\n  sortLikes,\r\n  sortComments,\r\n  sortViews,\r\n  sortInteractions,\r\n} from '../sortHelpers';\r\n\r\nexport default function Table({\r\n  data,\r\n  filterText,\r\n  selectValue,\r\n  updateCurrentPost,\r\n}) {\r\n  let filteredRows = data.filter(item =>\r\n    item.Displayname.toLowerCase().includes(filterText.toLowerCase())\r\n  );\r\n\r\n  switch (selectValue) {\r\n    case 'Displayname':\r\n      filteredRows.sort(sortAlphabetical);\r\n      break;\r\n    case 'Likes':\r\n      filteredRows.sort(sortLikes);\r\n      break;\r\n    case 'Comments':\r\n      filteredRows.sort(sortComments);\r\n      break;\r\n    case 'Views':\r\n      filteredRows.sort(sortViews);\r\n      break;\r\n    case 'Interactions':\r\n      filteredRows.sort(sortInteractions);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  const finalRows = filteredRows.map(item => {\r\n    return (\r\n      <tr key={item.SocialPost_ID}>\r\n        <td\r\n          onClick={() =>\r\n            updateCurrentPost({\r\n              name: item.Displayname,\r\n              id: item.SocialPost_ID,\r\n            })\r\n          }\r\n        >\r\n          <Link to=\"/postValues\">{item.Displayname}</Link>\r\n        </td>\r\n        <td>{item.Likes}</td>\r\n        <td>{item.Comments}</td>\r\n        <td>{item.Views}</td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Likes</th>\r\n            <th>Comments</th>\r\n            <th>Views</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{finalRows}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function PostsValuesTable({ data, currentPost }) {\r\n  // Need to isolate the ID of the brand, and filter it here\r\n\r\n  const rows = data\r\n    .filter(item => item.SocialPost_ID === currentPost.id)\r\n    .map((item, i) => {\r\n      return (\r\n        <tr key={i}>\r\n          <td>{item.BrandName}</td>\r\n          <td>{item.TagValue}</td>\r\n          <td>{item.MentionValue}</td>\r\n        </tr>\r\n      );\r\n    });\r\n\r\n  return (\r\n    <div>\r\n      <h3>Posts made by {currentPost.name}</h3>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Brand Name</th>\r\n            <th>Tag Value</th>\r\n            <th>Mention Value</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{rows}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { sortViews } from '../sortHelpers';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nexport default function ViewsPlot({ data }) {\r\n  const topFive = [...data].sort(sortViews).slice(0, 5);\r\n  console.log('top five', topFive);\r\n\r\n  const barData = {\r\n    labels: Array.from(topFive, item => item.Displayname),\r\n    datasets: [\r\n      {\r\n        label: 'Number of Views',\r\n        data: Array.from(topFive, item => item.Views),\r\n        backgroundColor: [\r\n          'rgba(46, 161, 23, 0.2)',\r\n          'rgba(46, 161, 23, 0.2)',\r\n          'rgba(46, 161, 23, 0.2)',\r\n          'rgba(46, 161, 23, 0.2)',\r\n          'rgba(46, 161, 23, 0.2)',\r\n        ],\r\n        borderColor: [\r\n          'rgba(46, 161, 23)',\r\n          'rgba(46, 161, 23)',\r\n          'rgba(46, 161, 23)',\r\n          'rgba(46, 161, 23)',\r\n          'rgba(46, 161, 23)',\r\n        ],\r\n        borderWidth: 2,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n  return (\r\n    <div>\r\n      <h3>Top Five Most Viewed Posts</h3>\r\n      <Bar data={barData} options={options} />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { sortInteractions } from '../sortHelpers';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nexport default function InteractionsPlot({ data }) {\r\n  const topFive = [...data].sort(sortInteractions).slice(0, 5);\r\n  console.log('top five', topFive);\r\n\r\n  const barData = {\r\n    labels: Array.from(topFive, item => item.Displayname),\r\n    datasets: [\r\n      {\r\n        label: 'Average Number of Interactions',\r\n        data: Array.from(\r\n          topFive,\r\n          item => (item.Views + item.Comments + item.Likes) / 3\r\n        ),\r\n        backgroundColor: [\r\n          'rgba(46, 161, 23, 0.2)',\r\n          'rgba(46, 161, 23, 0.2)',\r\n          'rgba(46, 161, 23, 0.2)',\r\n          'rgba(46, 161, 23, 0.2)',\r\n          'rgba(46, 161, 23, 0.2)',\r\n        ],\r\n        borderColor: [\r\n          'rgba(46, 161, 23)',\r\n          'rgba(46, 161, 23)',\r\n          'rgba(46, 161, 23)',\r\n          'rgba(46, 161, 23)',\r\n          'rgba(46, 161, 23)',\r\n        ],\r\n        borderWidth: 2,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n  return (\r\n    <div>\r\n      <h3>Highest Average Interactions Per Post</h3>\r\n      <Bar data={barData} options={options} />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Filter({ handleChange, filterText, handleSelect }) {\r\n  return (\r\n    <div className=\"dashboard__filter\">\r\n      <label htmlFor=\"nameFilter\">Search by name: </label>\r\n      <input\r\n        onChange={handleChange}\r\n        value={filterText}\r\n        type=\"text\"\r\n        name=\"nameFilter\"\r\n        id=\"nameFilter\"\r\n      />\r\n      <label htmlFor=\"optionFilter\">Sort by: </label>\r\n      <select onChange={handleSelect} name=\"optionFilter\" id=\"optionFilter\">\r\n        <option value=\"\">(none)</option>\r\n        <option value=\"Displayname\">Alphabetical</option>\r\n        <option value=\"Likes\">Highest Likes</option>\r\n        <option value=\"Comments\">Highest Comments</option>\r\n        <option value=\"Views\">Highest Views</option>\r\n        <option value=\"Interactions\">Highest Interactions</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport PostsTable from './components/PostsTable';\r\nimport PostsValueTable from './components/PostsValuesTable';\r\nimport ViewsPlot from './components/ViewsPlot';\r\nimport InteractionsPlot from './components/InteractionsPlot';\r\nimport Filter from './components/Filter';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  // TODO: Extra credit\r\n\r\n  const [posts, updatePosts] = useState([]);\r\n  const [postValues, updatePostValues] = useState([]);\r\n  const [currentPost, updateCurrentPost] = useState({});\r\n  const [selectValue, updateSelectValue] = useState();\r\n\r\n  useEffect(() => {\r\n    async function getData() {\r\n      try {\r\n        const res = await axios.get(\r\n          'https://s3-us-west-2.amazonaws.com/hookit.homework/Posts.json'\r\n        );\r\n        updatePosts(res.data);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function getData() {\r\n      try {\r\n        const res = await axios.get(\r\n          'https://s3-us-west-2.amazonaws.com/hookit.homework/PostValues.json'\r\n        );\r\n        updatePostValues(res.data);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  const [filterText, updateFilterText] = useState('');\r\n\r\n  function handleChange(e) {\r\n    updateFilterText(e.target.value);\r\n  }\r\n\r\n  function handleSelect(e) {\r\n    updateSelectValue(e.target.value);\r\n  }\r\n\r\n  // Display top 5 display names by average interactions per post\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"app\">\r\n        <div className=\"content\">\r\n          <div className=\"left\">\r\n            <nav>\r\n              <ul>\r\n                <Link to=\"/\">\r\n                  <li>Posts</li>\r\n                </Link>\r\n                <Link to=\"/visualizer\">\r\n                  <li>Visualizer</li>\r\n                </Link>\r\n              </ul>\r\n            </nav>\r\n          </div>\r\n          <div className=\"right\">\r\n            <h1>Your Dashboard</h1>\r\n            <Switch>\r\n              <Route path=\"/\" exact>\r\n                <h3>All Posts</h3>\r\n                <Filter\r\n                  handleChange={handleChange}\r\n                  handleSelect={handleSelect}\r\n                  filterText={filterText}\r\n                  selectValue={selectValue}\r\n                />\r\n                <PostsTable\r\n                  data={posts}\r\n                  filterText={filterText}\r\n                  selectValue={selectValue}\r\n                  updateCurrentPost={updateCurrentPost}\r\n                />\r\n              </Route>\r\n              <Route path=\"/postValues\">\r\n                <PostsValueTable data={postValues} currentPost={currentPost} />\r\n              </Route>\r\n              <Route path=\"/visualizer\">\r\n                <div className=\"plots\">\r\n                  <ViewsPlot data={posts} />\r\n                  <InteractionsPlot data={posts} />\r\n                </div>\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}